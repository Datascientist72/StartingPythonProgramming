# -*- coding: utf-8 -*-
"""list.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W0TDE5UvvxXSo87b5Plj-2BwolfOk8O0

List
a list is a sequence of objects declered using square brackets and the elements are separated by commas. the object may be combiation of different types numbers,strings even other lsits.it is orderd and indexable

**list constructor function**:the list constructor function is for creating new list object the two ways of creating a new list object is list()  and []the default values for the list is [] (empty list) if no argument is given to constructor list it creates a new empty list
"""

lst=list()
lst

print(type(lst))

lst=[]
lst

type(lst)

"""**note that the constructor like tuple,list are not called methods because they are not called on existing object like methodsbut rather they are used to create new objectsof the corresponding type**

Indexing of list
indexing starts with zero
accessing a non exixting index will result in IndexError
"""

fruits=['apple','mango','grapes','mango']
for i in range(len(fruits)):
  print(f'the index of  {fruits[i]} {i}')

fruits[0]

"""indexing of Nested lists
lsit within list
"""

lst=[1,2,3,'six',[1,2,3]]
lst[4]

lst.index([1,2,3])

"""Negative indexing"""

fruits=fruits=['apple','mango','grapes','mango']
fruits[-1]

fruits = ['apple', 'mango', 'grapes', 'mango']

for i in range(-1 , -len(fruits)-1, -1):
    print(f"The negative index of {fruits[i]} is {i}")

"""Slicing of lists:the range of items from the list can be accessed using the slice operator which is colon(:) and with indexes starting from zero and ending with length of list"""

fruits[:]

fruits[0:2]

fruits[:2]

"""Mutability of lists:unlike strings lists are mutable"""

fruits[:]

fruits[2]='banana'
fruits

"""concatination of lists
while the + operator concatinates two lists the *
operator concatinates n copies of list(list * n)


"""

fruits=['apple', 'mango', 'grapes', 'mango']
morefruits=['kiwi','tomato']
allfruits=fruits+morefruits
allfruits

morefruits*2

2*morefruits

"""membership in a list"""

fruits=['apple', 'mango', 'grapes', 'mango']
'apple' in fruits

'kiwi' in fruits

"""compare the items
while == and  != test whether two items in a list are equal or not the comprision operator < and > compare the items if the two items cpmpared are strings then the comprision is is using dictionary order
"""

num=[1,2,3,4,5,6,7,4,89]
num[1]==num[7]

num[6]>num[1]

"""list methods
1:append() used to add the element a tthe end of lsit
"""

a=[1,2]
a.append(3)
a

"""2:extend() it extends the list by appending elements from the iterable
what i mean to say is that if i do like this
a=[1,2,3]
b=[4,5,6]
then write a.append(b)
it will give ouput a=[1,2,2,[4,5,6]]
but i want a=[1,2,3,4,5,6]
which is possible by using a.extend(b)
a=[1,2,3,4,5,6]
"""

a=[1,2,3]
b=[4,5,6]
a.append(b)
print(a)

a=[1,2,3]
b=[4,5,6]
a.extend(b)
print(a)

"""insert() it inserts object before the specified index"""

a=["apple","banana"]
a.insert(0,"kiwi")
a

a.insert(1,'mango')
a

"""pop()
it removes and returns item at specified index.IndexError is raised if lsit is empty or index is out of range
"""

fruits=['mang','dango','tango']
fruits.pop(1)

fruits

"""remove() removes the forst occuranceof value .ValueError is raised if the valuse is not present"""

a=[1,2,3,4,5,1,2]
a.remove(1)
a

"""clear() it removes all items from list"""

a.clear()
a

"""copy() it returns a shallow copy of lsit
there are two types of copies one is shallow and other is deep
**shallow copy**: the copy created which internlly are same i mean to say that if one copy is altered or changed then the change will reflect in the other copy as well
while as **deep copy** is one in which two different copies are created indipendent on each othe no change will reflect on other if one is changed

"""

a=[1,2,3,4]
b=a.copy()
b

a[1]=10
a

"""**remembr if list is flat like a **the change in copy will not be seen in the in other copy
it only effects if list is nested
"""

b

print(a is b)

a=['mango',1,2]
b=a.copy()
b

b[2]="chalo"
print(a)
print(b)

a

a=[1,2,3,[4,5,6]]
b=a.copy()
print(a)
print(b)

a[3]="hii"
a

b

"""count() it returns number of occurances of value"""

a=[1,2,3,4,5,6,1,2,3]
a.count(1)

"""index() returns the first occurance of specified value.a valueerror is raised if the value is not present
if more than one occurance is present then the first occurance is printed
"""

a=[1,2,3,4,5,6,1,2,3]
a.index(1)

a.index(5)

"""reverse() it is used to reverse the list"""

a.reverse()
a

"""sort()  a list is sorted using sort method the sort is in-place ie the list itself is modifed and stable that is the order of two equal elements is maintained"""

a=[1,2,3,4,5,6,1,2,3]
a.sort()
a

a.sort(reverse=True)
a

"""del():used to delete entire list or one or more items of a list"""

a=[1,2,3,4,5,6,1,2,3]
del a[5]
a

"""other built in functions are len(),sum(),min(),max(),any(),all(),sorted(),map(),"""

a=[1,2,3,4,5,6,1,2,3]
len(a)

sum(a)

min(a)

max(a)

"""any() function will return True if Bool(x) is True for any value of x in the list if the lsit is empty the function will return False"""

num=[1,2,3,4,5]
any(num)

"""all() return sstrue if bool(x) is true"""

all(num)

"""sorted() returns a list sorted in the ascending order the original list remains unchanged."""

a=[1,2,3,4,5,6,1,2,3]
sorted(a)