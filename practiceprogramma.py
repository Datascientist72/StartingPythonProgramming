# -*- coding: utf-8 -*-
"""Practiceprogramma.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YEnj-wH5Suo6Q0e7jTSGqG26jlbZHTmL
"""

phonebook={
    'mame':['Alice','Bob','Charlie'],
    'cit':['Germany','Melburn','Frankfort'],
    'Number':['8889994441','8888999977','8888777799']
}
phonebook

name=input('enter name to search:')
print('number',phonebook.get(name,'not found'))
new_name=input('enter new contact name:')
new_number=input('enter new contact number:')
phonebook[new_name]='new_number'
print('updated phonebook',phonebook)
del_name=input('enter the name to delete:')
if name in phonebook:
  del phonebook[del_name]
print('final phone book',phonebook)

from collections import deque
admission_queue = deque()

while True:
    print("Student Admission Queue ")
    print("1. Add student to queue (Enqueue)")
    print("2. Admit student (Dequeue)")
    print("3. View next student in queue (Peek)")
    print("4. Display all students in queue")
    print("5. Exit")

    choice = input("Enter your choice (1-5): ")

    if choice == '1':
        name = input("Enter student name: ")
        admission_queue.append(name)
        print(f"{name} added to the admission queue.")

    elif choice == '2':
        if admission_queue:
            admitted = admission_queue.popleft()
            print(f"{admitted} has been admitted.")
        else:
            print("No students in queue!")

    elif choice == '3':
        if admission_queue:
            print(f"Next student in queue: {admission_queue[0]}")
        else:
            print("Queue is empty.")

    elif choice == '4':
        if admission_queue:
            print("Students waiting for admission:", list(admission_queue))
        else:
            print("No students in queue.")

    elif choice == '5':
        print("Exiting Admission Queue System.")
        break

    else:
        print("Invalid choice! Please enter 1-5.")

from collections import  deque

queue=deque()#create and empty queue
#enqueue (add elements)
queue.append('A')
queue.append('b')
queue.append('c')
print('Queue after enqueue:',queue)

#dequeue (remove elements in fifo order)
first=queue.popleft()
print('Dequeued element:',first)
print('Queue now',queue)

queue.append('D')
print('queue after adding D:',queue)

print('front element is:',queue[0])

if not queue:
  print('queue is empty')
else:
  print('queue is not empty')

from collections import deque

stack = []

print("Enter 5 actions (like: open file, edit, save, etc.)")


for i in range(5):
    action = input(f"Enter action {i+1}: ")
    stack.append(action)

print("Actions recorded:", stack)

if stack:
    last_action = stack.pop()
    print(f"Undo performed: '{last_action}' removed.")
else:
    print("No actions to undo!")

print("Actions left after undo:", stack)

while True:
    print("File Operations Menu")
    print("1. Open File")
    print("2. Edit File")
    print("3. Save File")
    print("4. Delete File")
    print("5. Exit")

    choice = input("Enter your choice (1-5): ").strip()

    if choice == '1':
        print("File opened successfully.")
    elif choice == '2':
        print("You are now editing the file...")
    elif choice == '3':
        print("File saved successfully.")
    elif choice == '4':
        print("File deleted.")
    elif choice == '5':
        print("Exiting the program.")
        break
    else:
        print("Invalid choice! Please enter 1-5.")
        continue
    again = input("\nDo you want to perform another action? (yes/no): ").strip().lower()
    if again != "yes":
        print("Goodbye!")
        break

action_stack = []

print("Enter 5 actions (e.g., open file, edit line, save file, delete line,delete file.)")

for i in range(5):
    action = input(f"Enter action {i+1}: ").strip()
    action_stack.append(action)

print("Actions recorded:")
for i, act in enumerate(action_stack, start=1):
    print(f"{i}. {act}")

if action_stack:
    undone_action = action_stack.pop()
    print(f"Undo performed: '{undone_action}' has been removed.")
else:
    print("No actions to undo!")
print("Actions left after undo:")
for i, act in enumerate(action_stack, start=1):
    print(f"{i}. {act}")