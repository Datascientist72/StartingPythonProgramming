# -*- coding: utf-8 -*-
"""Strings.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dt3lSNZctKENcR2ONESkMj47unYjX2DG

** Strings**:sequence of characters which may consist of letters,numbers,blanks,punctuation and special symbols enclosed within a single or doubke quotes the python string type is denoted by str()
"""

str1='hello'
str1

type(str1)

multiline="""hello this is multiline"""
multiline

"""**string** **concatination**"""

str1="hello"
str2="world"
result=str1 +" "+ str2
result

print(str1+str2)

print(str1,str2)

print(str1,str2,sep=' ')

print(str1,str2,sep=',')

print(str1,str2,sep=',',end="!")

"""**String** **Replication**"""

string1="hello"
string2='world'
print(string1+' '+ string2)

"""String Indexing: string is indexable and iterable"""

s="hello"
print(s[0])
print(s[1])
print(s[2])
print(s[3])
print(s[4])

"""negative indexing"""

print(s[-1])
print(s[-2])
print(s[-3])
print(s[-4])

"""we can do operation from backword to forword on given string"""

neg="hello"
neg[-5:None]

neg[:]

neg[-5:]

neg[-5:len(neg)]

"""to print all characters in string"""

neg[:5]

"""> **If start < end, use step=+1 (default).

If start > end, use step=-1.**

there are only fove characters in string but i am printing -6 becasue python is exclusive it pprints the character before it not the index u  are mentioning
"""

neg[-1:-6:-1]

"""Membership in strings:if u want to check whether a substring is in string"""

str1='if u stay positvie,good things and good people will be drawn to u'
print('and' in str1)
print('super' in str1)

"""Strings ae immutable: once written can  not be changed"""

s='banana'
s[0]

s[0]='B'

# it will give error since strings are imutable

"""**String methods**
since strings are immutable the methods return a modified copy of the string invoking the method rather than changing the orginal string

**Index method()** :return the lowest index in a string where a substring supplied as argument found
"""

s='helllo my friend how are u doing i was thinking about u'
print(s.index('my'))
print(s.index('about'))

"""The **Rindex() method**
returns the highest index in a string where sub string sub is found such that sub is contained within s[start:end]the valueerror is raised when the substring is not found the syntax for using this method for a string is string.rindex(sub,start,end)
"""

string='if u think  positve things will come to u'
string.rindex('things')
#string.index('u')

string[0:30].rindex('u')

"""rfind() it returns the highest index in string where substring sub is found

---


"""

string.rfind('u')
#here u is at index 3 and 40 but it returns 40 because frind() gives the highest index of string

"""lower() returns copy of string converted to lower case"""

string="Hello How Are You"
string1=string.lower()
print(string1)

"""Upper() returns string copy to upper case"""

str1="hello how are u"
str1.upper()

"""swapcase() it returns copy in which upper case char is converted to lower and lower to upper"""

s='Helllo How Are U Doing'
s.swapcase()

"""captalize() returns copy of  captalized string
the difference between upper and captalize is that upper() captalize every char while as captalize() only does it with first charracter
"""

s='hello how are u'
s.capitalize()

"""Tittle() returns copy a title-cased each word starts with one uper case cahracter version of string."""

s='stay positive in all cases that is best u can do for u and urself'
s.title()

"""Count() method: returns number of non overlaping occurance of substring in a substring where a substring applied as argument is found"""

print(s.count('best'))
print(s.count('u'))

"""Replace() replaces old characters with new characters"""

str1="think positive because positive thinking attracts good"
str1.replace('good','good people')

"""maketrans() it returns a translation table usable for another related method str.translate()"""

table = str.maketrans("aeiou", "12345")
s = "hello world"
print(s.translate(table))

st=str.maketrans("hello","12345")
s="hello boys"
print(s.translate(st))

"""strip() method:
returns a copy of string with leading and trialing whitespaces removed
"""

s="           hello"
print(s)

s.strip()

s='********hello********'
s.strip('*')

"""lstrip()
removes leading spaces or we can say removes spaces from left side
"""

lstr="         hello   "
lstr.lstrip()

lstr="*********heloo***********"
lstr.lstrip('*')

"""rstrip()
 removes trialing whitespaces removed or we can say that the copy where right side spaces are removed

"""

rstr='********hello**********'
rstr.rstrip('*')

"""split() :returns a list of data type of substring in the string using any white space character(including \\n \\r \\t \\f and spaces)as a default separator string
**what i meant to say that whenever it dectects whitespace it creates separate string**
"""

s='good things happens to those who hope for good'
s.split()

s='good things good people'
print(s.split())
print(s.rsplit())

"""length and centre of a string
len() gives the total characters in string and center() returns a string of length equal to the value of arguments
"""

s="hello boys"
print(len(s))
s.center(50)
#see where is hello boys written this is what center does

"""*startwith() *
returns true or false
"""

s="hello"
s.startswith(s)

s.startswith('h',0)

s.startswith('o',4)

"""format() returns a formatted versions of string using substitution from args and kwargs"""

s='good things'
format(s,'>20')

"""zfill() pads a numeric string with zeros on the left to fill a field of the given width
if string is already longer than width nothing happens
"""

n='123456789'
n.zfill(20)

