# -*- coding: utf-8 -*-
"""Datasetoperations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wjCD-UQs-ebBBBfHrjUqRK8T8yxLhZg8
"""

data={
       'name':['ali','mohd','hussain'],
       'age':[24,23,25],
       'marks':[80,90,60],
       }

data

import pandas as pd
import numpy as np
import matplotlib as plt

df=pd.read_csv('Monthly_rates.csv')#reads the csv file so that after uploading the file we can perform the operation on it

df

df.head()#Shows first n rows (default 5).

df.tail()#Shows last n rows (default 5).

df.info()#Summary: column names, non-null counts, datatypes, memory usage.

df.describe()#Summary statistics (count, mean, std, min, 25%, 50%, 75%, max)

df.shape  #Returns (rows, columns).

df.columns #List of column names.

df.index #Index (row labels)

df.index

df.dtypes #Data types of columns

"""Selection and filtering"""

df['Sex_Label'] #Select single column.

df[["Sex_Label","Season","Race_Label"]] #used to select multiple columns at a time

df.loc[3,'Season'] #uses labels

df.iloc[0] # uses integer positions

"""df[df['columnname'] > 10 ] runs a condition on dataframe and returns the output satisfying the given condition"""

df[df['_YearMonth'] > 10] # i had taken Race_Label as column and put condition on it that didn't work as Race_Label was holding strings

df.query('_YearMonth > 10 & MonthlyRate > 50') #SQL like query

df.isnull()

df['MonthlyRate']

"""**Sorting and Ranking**"""

df.sort_values('_YearMonth').tail(5)# sort by column (ascending by default)

df.sort_values(['_YearMonth','MonthlyRate'],ascending=[True,False])#sort Multi coolumn

df.sort_index() #sort by index

df.rank()

"""**Handling missing values**"""

df.isnull() #detect missing values(NaN)

df.notnull() #detect non-missing values

df.info() #gives all information about the data set

df.fillna(df['MonthlyRate'].mean())

df.fillna(10)# replaces NaN with the value 10

df.dropna()      # drops rows with Nan value

"""Aggregation & Statistics"""

df['MonthlyRate'].mean()
#df.mean() if all columns were integer or float since there are  strings also so woll show errors

df.mean() #this operation will calculate the mean of the numerical colums ignorig the other datatypes

df.median() #calculate the median of  the columns if there is numeric column

df.std()  #calculates the standard deviation of the numeric values ignoring the other data types

df.corr()# computes the pair wise correlation between numeric columns.it ignores non numeric values

df.cov()#computes the pairwise covariance between numeric columns

"""Groupby(split-apply-combine)"""

