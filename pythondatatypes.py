# -*- coding: utf-8 -*-
"""pythondatatypes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BJgIPxvSUDZG72dIZOypDi2juehAsCOE

Python Data Types
1:Integer:it is a scalar object to create a integer object with value 5 and assign it to variable x we can use this statement
"""

x=5
x
type(x)

"""since the type of above is not explicitly specified we can use another method to create object type expllicitly

you can see in both examples the type is same that is int but 2nd example explicitly specifies the type of variable
"""

x=int(6)
print(x)
type(x)

"""explicit type concversion can also be done by using constructor function. the function concerts the float type into integer"""

y=int(43)
print(y)

u=int(-4.5)
print(u)

"""round:rounding up an integer the round function can be used

"""

round(7.9)

type(round(7.9))

round(4.366689)

"""type conversion: the type conversion from string to integer type will work only if t makes sense(i.e., the string is a valid representation of integer type) otherwise the result is an error"""

x=int('1234')
print(type(x))

x=int('hell')
#not allowed since it does not make sense

"""**Float**

float is a scalar value which represent the real numbers literals of the float type alwasy include a decimal point for example 7.0,4.177 etc
"""

x=4.77
x

"""the constructor function float() is used to explicitly used to create a floating point object"""

x=float(4.55)
x

#explicit conversion
x=float(4)
x

#default float
x=float()
x

x=2.5/4
x

""" **Complextype**
 it represents the aggregration of multiple source of information rather than a single value with real and imaginary parts a and bthe complex number is written as a+bj
"""

x=7.5+4j
y=complex(10,5)
x

x.imag

x.real

"""**Boolean** it is a scalar object that is frequently used for control flow it is different from integers, floating poits and numbers and strings for which there are an infinite number of possible literals. the boolean type is used to represent the logical vlaues which there are only two truth values.

>  **True** and **False**


"""

a=8
b=9
a>b

b>a

a==b



""" **special** literal:*NONE*
 the python has special literal NONE which means that object has not been created .None is used to represent that "no valuse", 'nothing', 'non-exixtance'
 etc.
"""

a=[1,2,3,None,True,False]
count=0
for i in a:
  if i:
    count += 1
print(f'length of list:',len(a))

type(a[3])