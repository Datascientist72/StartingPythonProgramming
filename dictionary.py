# -*- coding: utf-8 -*-
"""Dictionary.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hlxI7zL9YKa7GSyGfsfqBr4-2GjXztI9

The python dictionary type denoted ad Dict, is a container type like list and str which enables us to use user defines indexes. A dictionary contains (key,value) pairs the general format of expression that defines a dictionary object is  {key:value}
the key difference between dictionary and list is that an item is accessed using a user-specified index rather than by the items position in the container.
The key is the index that is used to access the value
"""

weekdict={'su':'sundary','mo':'monday','tw':'twesday','th':'thursday'}
weekdict

print(weekdict['tw'])

print(weekdict.get('mo'))

my_dict={
    'a':1,'b':2,'c':3,'d':4
}
print(my_dict['a'])

for key,value in my_dict.items():
  if value%2==0:
    print(key)

my_dict = {"a": 1, "b": 2, "c": 2}

keys = [k for k, v in my_dict.items() if v == 2]
print(keys)   # ['b', 'c']

"""dictionary Constructor Function
an empty dicitonary can be created using the default dict() or simply a = {}
"""

dict()

a={}
type(a)

week={
    'Monday': 'Moon\'s Day',
  'Tuesday': 'Tiw\'s Day',
  'Wednesday': 'Woden\'s Day (Odin)',
  'Thursday': 'Thor\'s Day',
  'Friday': 'Frigg\'s Day',
  'Saturday': 'Saturn\'s Day',
  'Sunday': 'Sun\'s Day'
}
week['Monday']

print(week.get('Monday'))

"""len() returns the length of dictionry that is number of elements in it"""

len(week)

"""Indexing of Dictionary
the values of dictionary are accessed by key to access the value 'Moon's Day' in dictionary we use key 'Monday'
"""

week['Monday']

print(week.get('Monday'))

#week['xyz']
#this code will throw error as no key in the code is of such
#there is a safe way also that is
print(week.get('xyz'))

"""Adding and editting:like lists dictionaries are also mutable the indexing operator can be used to change the value corresponding  to a key or add a new (key,value) pair to the dictionary"""

week['Friday']='Worship day'
week

week['Holiday']='Relax day'
week

for key,value in week.items():
  if key == 'Holiday':
    print('it is in Dict')
  else:
    print('it is not')

"""Membership of Dictionary: the 'in' and 'not in ' operators are used to check whether a object is key in the dictionary"""

'Monday' in week

'Monday' not in week

"""Dictionary Methods
1: get() returna the value of key k in dictionary,d,equivalent to d[k]
"""

week

week.get('Monday')

week['Holiday']

"""update(): the update method when called on dictionary d1 with input argument dictionary d2 all the (key,value)pairs of d2 are added to d1"""

week

week={'Monday': "Moon's Day",
 'Tuesday': "Tiw's Day",
 'Wednesday': "Woden's Day (Odin)",
 'Thursday': "Thor's Day",
 'Friday': 'worship day',
 'Saturday': "Saturn's Day"}
week

oneday={'Sunday':"Sun's Day"}
week.update(oneday)
week

"""copy():returns the shallow copy of dictionary"""

dic={'a':1,'b':2}
b=dic.copy()
b

b.update({'a':10})
print(dic)
print(b)
#since in dictionary (only immutable values like int, str, float, bool, tuple) making change in them create a new one becaue they act as deep copies not shallow copies

"""clear():removes all items in dictionary"""

dictt={'a':1,'b':2}
dictt.clear()
dictt

"""pop(): takes a key and if key in dictionary it removes the associated key,value pair form the dictionary and return the value"""

week

week.pop('Monday')
print(week)

"""del():deletes the key,value pair from the dictionary"""

week

del week['Sunday']
week

"""keys():returns the keys in dictionary"""

week.keys()

"""values(): returns values in dictionary"""

week.values()

"""items():items method is very useful it returns a container that contains tuple objects one for each (key,value)pair this illustrates how to use these methods."""

week.items()

"""the method is usually used to iterate over the key value pair of dictionary"""

for item in week.items():print(item,end="")

"""**Note**:concatination,repeating operators(+,+) ,slicing,indexing[](slicing implies on order and there is no order in dictionary) are not supported in dictionary"""